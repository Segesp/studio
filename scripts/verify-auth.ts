// Script de verificaci√≥n de autenticaci√≥n
// Este script verifica que la configuraci√≥n de NextAuth est√© funcionando correctamente

import { authOptions } from '../src/pages/api/auth/[...nextauth]';
import { prisma } from '../src/lib/prisma';

async function verifyAuthSetup() {
  console.log('üîç Verificando configuraci√≥n de autenticaci√≥n...\n');

  // 1. Verificar conexi√≥n a base de datos
  try {
    await prisma.$connect();
    console.log('‚úÖ Conexi√≥n a base de datos: OK');
  } catch (error) {
    console.log('‚ùå Error de conexi√≥n a base de datos:', error);
    return;
  }

  // 2. Verificar tablas de NextAuth
  try {
    const tables = await prisma.$queryRaw`
      SELECT name FROM sqlite_master 
      WHERE type='table' AND name IN ('Account', 'Session', 'User', 'VerificationToken');
    ` as Array<{name: string}>;
    
    const expectedTables = ['Account', 'Session', 'User', 'VerificationToken'];
    const foundTables = tables.map(t => t.name);
    
    console.log('üìä Tablas encontradas:', foundTables);
    
    for (const table of expectedTables) {
      if (foundTables.includes(table)) {
        console.log(`‚úÖ Tabla ${table}: OK`);
      } else {
        console.log(`‚ùå Tabla ${table}: FALTANTE`);
      }
    }
  } catch (error) {
    console.log('‚ùå Error verificando tablas:', error);
  }

  // 3. Verificar usuario demo
  try {
    const demoUser = await prisma.user.findUnique({
      where: { email: 'demo@example.com' }
    });

    if (demoUser) {
      console.log('‚úÖ Usuario demo encontrado:', demoUser.email);
    } else {
      console.log('‚ö†Ô∏è  Usuario demo no encontrado, se crear√° en el primer login');
    }
  } catch (error) {
    console.log('‚ùå Error verificando usuario demo:', error);
  }

  // 4. Verificar variables de entorno
  const envVars = [
    'DATABASE_URL',
    'NEXTAUTH_SECRET',
    'NEXTAUTH_URL'
  ];

  console.log('\nüîß Variables de entorno:');
  for (const envVar of envVars) {
    const value = process.env[envVar];
    if (value) {
      console.log(`‚úÖ ${envVar}: ${envVar === 'NEXTAUTH_SECRET' ? '[REDACTED]' : value}`);
    } else {
      console.log(`‚ùå ${envVar}: NO CONFIGURADA`);
    }
  }

  // 5. Verificar configuraci√≥n de NextAuth
  console.log('\n‚öôÔ∏è  Configuraci√≥n NextAuth:');
  console.log(`‚úÖ Providers configurados: ${authOptions.providers?.length || 0}`);
  console.log(`‚úÖ Session strategy: ${authOptions.session?.strategy || 'default'}`);
  console.log(`‚úÖ P√°ginas personalizadas: ${authOptions.pages ? 'S√≠' : 'No'}`);

  await prisma.$disconnect();
  console.log('\nüéâ Verificaci√≥n completada!');
}

verifyAuthSetup().catch(console.error);
