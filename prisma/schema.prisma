
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String    @id @default(cuid())
  name        String?
  email       String    @unique
  emailVerified DateTime? // Required for NextAuth Adapter
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tasks       Task[]
  events      Event[]
  docs        Doc[]     @relation("DocOwner")
  accounts    Account[] // Required for NextAuth Adapter
  sessions    Session[] // Required for NextAuth Adapter
}

// Required for NextAuth.js Prisma Adapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Required for NextAuth.js Prisma Adapter
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Required for NextAuth.js Prisma Adapter (optional, for email provider)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("pending") // pending, in_progress, done
  priority    Int       @default(0)          // 0: low, 1: medium, 2: high, 3: urgent
  dueDate     DateTime?
  tags        String[] // array de etiquetas
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  color       String    @default("blue")
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Doc {
  id        String       @id @default(cuid())
  title     String
  ownerId   String
  owner     User         @relation("DocOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  versions  DocVersion[]
}

model DocVersion {
  id        String   @id @default(cuid())
  docId     String
  doc       Doc      @relation(fields: [docId], references: [id], onDelete: Cascade)
  content   Json // estructura CRDT o snapshot
  createdAt DateTime @default(now())
  createdBy String // Should ideally be a userId, but keeping as String for now based on plan
}
